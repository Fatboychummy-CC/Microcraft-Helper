-- Menu to get details about an item. Needed details are:
-- 1. Name
-- 2. The machine to be used.
-- 3. The crafting recipe for the item.
-- 4. The number of items that are crafted per recipe.
-- 5. Whether the output is a fluid or not.

--[[ recipe context
  ---@type Recipe
  local recipe = {
    result = {
      name = item,
      amount = output_count,
      fluid = false
    },
    ingredients = ingredients,
    machine = machine or "crafting table",
    enabled = true,
    random_id = math.random(-999999999, 999999999) -- probably enough, considering this isn't meant to house every recipe ever
  }

  Above is generated by:
  --- Create a new recipe for the given item.
  ---@param item string The item to create the recipe for.
  ---@param output_count number The amount of the item that are outputted by the recipe.
  ---@param ingredients RecipeIngredient[] The ingredients required to craft the item.
  ---@param machine string? The machine used to craft the item. Defaults to "crafting table".
  ---@return Recipe recipe The recipe created.
  function RecipeHandler.create_recipe(item, output_count, ingredients, machine)
]]


local items_common    = require "ui.items.common"
local machines_common = require "ui.machines.common"
local get_text        = require "ui.util.get_text"
local get_integer     = require "ui.util.get_integer"
local search          = require "ui.util.search"
local confirm         = require "ui.util.confirmation_menu"
local util            = require "util"

local recipe_handler  = require "recipe_handler"

--- Get information about an item.
---@param item_data Recipe? The item data to edit, if any.
---@return Recipe? recipe The new recipe for the item.
return function(item_data)
  local new_data = util.deep_copy(item_data) or {
    result = {
      name = "",
      amount = 1,
      fluid = false
    },
    ingredients = {},
    machine = "crafting table",
  }
  new_data.ingredients = {} -- clear ingredients, since we're going to be adding them manually

  local new_name = get_text("Enter item name", new_data.result.name)
  if not new_name then
    return
  end

  local machine_names = {}
  for _, data in pairs(machines_common.machines) do
    table.insert(machine_names, data.name)
  end
  local machine = search("Select machine for recipe", machine_names)
  if not machine then
    return
  end

  local output_count = get_integer("Enter recipe output count", new_data.result.amount, 1)
  if not output_count then
    return
  end

  local unique_items = get_integer("Enter amount of unique items in the recipe", math.max(1, #new_data.ingredients), 1)
  if not unique_items then
    return
  end

  local ingredients = {}
  for i = 1, unique_items do
    local ingredient_name = search("Select ingredient", recipe_handler.get_all_items(), true)
    if not ingredient_name then
      return
    end

    local ingredient_count = get_integer("Enter ingredient count", 1, 1)
    if not ingredient_count then
      return
    end

    table.insert(ingredients, {
      name = ingredient_name,
      amount = ingredient_count,
      fluid = false
    })
  end

  local is_fluid = confirm("Is the output a fluid?")

  return recipe_handler.create_recipe_object(
    new_name,
    output_count,
    ingredients,
    machine,
    is_fluid
  )
end
